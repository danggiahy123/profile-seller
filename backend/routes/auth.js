const express = require('express');
const router = express.Router();
const databaseManager = require('../database');

// Middleware ƒë·ªÉ log requests
router.use((req, res, next) => {
    console.log(`üîê Auth route: ${req.method} ${req.url}`);
    next();
});

// POST /api/auth/login - ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        
        if (!email || !password) {
            return res.status(400).json({
                error: 'Email v√† password l√† b·∫Øt bu·ªôc'
            });
        }
        
        const db = databaseManager.db;
        const usersCollection = db.collection('users');
        
        // T√¨m user trong MongoDB
        const user = await usersCollection.findOne({ 
            email: email,
            // Trong th·ª±c t·∫ø s·∫Ω hash password
            password: password // T·∫°m th·ªùi ƒë·ªÉ plain text
        });
        
        if (!user) {
            return res.status(401).json({
                error: 'Email ho·∫∑c password kh√¥ng ƒë√∫ng'
            });
        }
        
        // T·∫°o token (ƒë∆°n gi·∫£n)
        const token = `token_${user._id}_${Date.now()}`;
        
        res.json({
            message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            user: {
                id: user._id,
                email: user.email,
                name: user.name,
                role: user.role || 'user'
            },
            token: token
        });
        
    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({
            error: 'L·ªói server khi ƒëƒÉng nh·∫≠p',
            message: error.message
        });
    }
});

// POST /api/auth/register - ƒêƒÉng k√Ω
router.post('/register', async (req, res) => {
    try {
        const { name, email, password } = req.body;
        
        if (!name || !email || !password) {
            return res.status(400).json({
                error: 'T√™n, email v√† password l√† b·∫Øt bu·ªôc'
            });
        }
        
        const db = databaseManager.db;
        const usersCollection = db.collection('users');
        
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await usersCollection.findOne({ email });
        if (existingUser) {
            return res.status(409).json({
                error: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
            });
        }
        
        // T·∫°o user m·ªõi
        const newUser = {
            name,
            email,
            password, // Trong th·ª±c t·∫ø s·∫Ω hash
            role: 'user',
            createdAt: new Date(),
            updatedAt: new Date(),
            isActive: true
        };
        
        const result = await usersCollection.insertOne(newUser);
        
        res.status(201).json({
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
            user: {
                id: result.insertedId,
                name: newUser.name,
                email: newUser.email,
                role: newUser.role
            }
        });
        
    } catch (error) {
        console.error('Register error:', error);
        res.status(500).json({
            error: 'L·ªói server khi ƒëƒÉng k√Ω',
            message: error.message
        });
    }
});

// POST /api/auth/logout - ƒêƒÉng xu·∫•t
router.post('/logout', (req, res) => {
    res.json({
        message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
    });
});

// GET /api/auth/profile - L·∫•y th√¥ng tin user
router.get('/profile', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        
        if (!token) {
            return res.status(401).json({
                error: 'Token kh√¥ng h·ª£p l·ªá'
            });
        }
        
        // ƒê∆°n gi·∫£n h√≥a: t√¨m theo userId trong token
        const userId = token.split('_')[1];
        
        const db = databaseManager.db;
        const usersCollection = db.collection('users');
        
        const user = await usersCollection.findOne({ 
            _id: require('mongodb').ObjectId(userId) 
        });
        
        if (!user) {
            return res.status(404).json({
                error: 'Kh√¥ng t√¨m th·∫•y user'
            });
        }
        
        res.json({
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                role: user.role,
                createdAt: user.createdAt
            }
        });
        
    } catch (error) {
        console.error('Profile error:', error);
        res.status(500).json({
            error: 'L·ªói server khi l·∫•y th√¥ng tin user',
            message: error.message
        });
    }
});

module.exports = router;

